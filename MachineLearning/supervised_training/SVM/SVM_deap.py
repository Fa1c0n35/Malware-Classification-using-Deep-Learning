
import json
import re
import copy
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

from evolutionary_search import EvolutionaryAlgorithmSearchCV
from sklearn.svm import SVC
from sklearn.model_selection import StratifiedKFold
import pandas as pd
import numpy as np


def main():

    df_train = pd.read_csv('../train_dataset.csv')
    df_test = pd.read_csv('../test_dataset.csv')

    X_train, y_train = df_train.iloc[:, 2:].values, df_train.iloc[:, 0].values
    #X_test, y_test = df_test.iloc[:, 2:].values, df_test.iloc[:, 0].values

    # log-uniform: understand as search over p = exp(x) by varying x
    opt = EvolutionaryAlgorithmSearchCV(
        estimator=SVC(),
        # ref: https://github.com/automl/auto-sklearn/blob/master/autosklearn/pipeline/components/classification/libsvm_svc.py
        params={
            "kernel": ["rbf"],
            "C"     : np.logspace(1e-6, 1e+6, num=20, base=10),
            "gamma" : np.logspace(3.0517578125e-05, 8, num=20, base=10),
            'decision_function_shape': ['ovo', 'ovr'],
            'degree': list(range(2, 5)),
            'coef0': np.logspace(-1, 1, num=20, base=10),
            'coef0': np.logspace(1e-5, 1e-1, num=20, base=10),
        },
        cv=StratifiedKFold(
            n_splits=10,
            shuffle=True
        ),
        scoring="accuracy",
        verbose=True,
        population_size=50,
        gene_mutation_prob=0.10,
        tournament_size=3,
        generations_number=10,
    )

    opt.fit(X_train, y_train)

if __name__ == '__main__':
    main()
