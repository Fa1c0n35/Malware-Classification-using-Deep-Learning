
import sys
import os

from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
import pandas as pd

sys.path.append(os.path.abspath(os.path.join('..')))
import stdfunc


def main():

    df_train = pd.read_csv('../train_dataset.csv')
    df_test = pd.read_csv('../test_dataset.csv')

    X_train, y_train = df_train.iloc[:, 2:], df_train.iloc[:, 0]
    X_test, y_test = df_test.iloc[:, 2:], df_test.iloc[:, 0]
    unique_labels = sorted(y_train.unique().tolist())

    # hyper-parameters inferred from running hyperopt-sklearn
    clf = RandomForestClassifier(bootstrap=False, class_weight=None,
            criterion='entropy', max_depth=None, max_features='sqrt',
            max_leaf_nodes=None, min_impurity_decrease=0.0,
            min_impurity_split=None, min_samples_leaf=1,
            min_samples_split=2, min_weight_fraction_leaf=0.0,
            n_estimators=75, n_jobs=1, oob_score=False, random_state=1,
            verbose=False, warm_start=False)

    clf.fit(X_train, y_train)

    print("\n\n{}\n".format(clf.score(X_test, y_test)))

    y_predicted = clf.predict(X_test)

    print("Generating confusion matrix figure... \n")
    stdfunc.plot_confusion_matrix(y_test, y_predicted, ml_name='RF',
                                  classes=unique_labels,
                                  title='Confusion matrix for Random Forest evaluation')

    print("Generating classification report figure... \n")
    stdfunc.plot_classification_report(y_test, y_predicted, ml_name='RF',
                                  classes=unique_labels,
                                  title='Classification report for Random Forest evaluation')


if __name__ == '__main__':
    main()
