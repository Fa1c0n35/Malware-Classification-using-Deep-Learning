
import sys
import os

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import pandas as pd

sys.path.append(os.path.abspath(os.path.join('..')))
import stdfunc


def main():

    df_train = pd.read_csv('../train_dataset.csv')
    df_test = pd.read_csv('../test_dataset.csv')

    X_train, y_train = df_train.iloc[:, 2:], df_train.iloc[:, 0]
    X_test, y_test = df_test.iloc[:, 2:], df_test.iloc[:, 0]
    unique_labels = sorted(y_train.unique().tolist())

    curr_pred, curr_score = None, 0

    for k in range(1, 20):
        clf = KNeighborsClassifier(n_neighbors=k, n_jobs=-1)
        clf.fit(X_train, y_train)
        score = clf.score(X_test, y_test)
        y_predicted = clf.predict(X_test)
        if score > curr_score:
            print("K = {} -- {}".format(k, score))
            curr_pred = y_predicted
            curr_score = score


    print("Generating confusion matrix figure... \n")
    stdfunc.plot_confusion_matrix(y_test, curr_pred, ml_name='Nearest_Neighbor',
                                  classes=unique_labels,
                                  title='Confusion matrix for Nearest Neighbor evaluation')

    print("Generating classification report figure... \n")
    stdfunc.plot_classification_report(y_test, curr_pred, ml_name='Nearest_Neighbor',
                                  classes=unique_labels,
                                  title='Classification report for Nearest Neighbor evaluation')


if __name__ == '__main__':
    main()
