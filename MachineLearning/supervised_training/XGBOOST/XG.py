
import sys
import os

from xgboost import XGBClassifier
from sklearn import preprocessing
import pandas as pd

sys.path.append(os.path.abspath(os.path.join('..')))
import stdfunc


def main():

    df_train = pd.read_csv('../train_dataset.csv')
    df_test = pd.read_csv('../test_dataset.csv')

    X_train, y_train = df_train.iloc[:, 2:].values, df_train.iloc[:, 0].values
    X_test, y_test = df_test.iloc[:, 2:].values, df_test.iloc[:, 0].values
    unique_labels = sorted(set(y_train.tolist()))

    le = preprocessing.LabelEncoder()
    le.fit(y_train)
    y_train = le.transform(y_train)
    y_test = le.transform(y_test)

    # hyper-parameters inferred by running hyperopt-sklearn
    clf = XGBClassifier(colsample_bylevel=0.8737745469231419, colsample_bytree=1.0, gamma=4.858229599937319e-07, learning_rate=0.4853267733199465, max_delta_step=0, max_depth=9,
                        min_child_weight=0, n_estimators=64, reg_alpha=2.5693931492543614e-05, reg_lambda=6.027978487395207e-05, scale_pos_weight=73.0915750362818, subsample=0.5410531887103683)

    clf.fit(X_train, y_train)

    print("\n\n{}\n".format(clf.score(X_test, y_test)))

    y_predicted = clf.predict(X_test)

    print("Generating confusion matrix figure... \n")
    stdfunc.plot_confusion_matrix(y_test, y_predicted, ml_name='XG',
                                  classes=unique_labels,
                                  title='Confusion matrix for XGBoost evaluation')

    print("Generating classification report figure... \n")
    stdfunc.plot_classification_report(y_test, y_predicted, ml_name='XG',
                                       classes=unique_labels,
                                       title='Classification report for XGBoost evaluation')


if __name__ == '__main__':
    main()
